[
  {
    "contract": "Oracle",
    "metrics": [
      {
        "fn": "getGGPPriceInAVAX",
        "title": "GGP @ TS",
        "desc": "GGP price in AVAX at a particular timestamp",
        "formatter": "formatEtherAtTime"
      }
    ]
  },
  {
    "contract": "RewardsPool",
    "metrics": [
      { "fn": "canStartRewardsCycle", "desc": "" },
      { "fn": "getRewardsCycleCount", "desc": "" },
      { "fn": "getRewardsCycleStartTime", "formatter": "unixToISO" },
      { "fn": "getRewardsCyclesElapsed", "desc": "" },
      { "fn": "getRewardsCycleTotalAmt", "formatter": "formatEther" },
      { "fn": "getInflationIntervalStartTime", "formatter": "unixToISO" },
      { "fn": "getInflationIntervalsElapsed" },
      { "fn": "getInflationAmt", "formatter": "formatInflationAmt" },
      {
        "fn": "getClaimingContractDistribution",
        "args": ["ClaimNodeOp"],
        "title": "getClaimingContractDistribution (NodeOp)",
        "formatter": "formatEther"
      },
      {
        "fn": "getClaimingContractDistribution",
        "args": ["ClaimProtocolDAO"],
        "title": "getClaimingContractDistribution (DAO)",
        "formatter": "formatEther"
      },
      {
        "fn": "getClaimingContractDistribution",
        "args": ["MultisigManager"],
        "title": "getClaimingContractDistribution (Oracle)",
        "formatter": "formatEther"
      }
    ]
  },
  {
    "contract": "MinipoolManager",
    "metrics": [
      {
        "fn": "getTotalAVAXLiquidStakerAmt",
        "desc": "total AVAX *actually* withdrawn from ggAVAX and sent to P-Chain",
        "formatter": "formatEther"
      }
    ]
  },
  {
    "contract": "ProtocolDAO",
    "metrics": [
      { "fn": "getRewardsEligibilityMinSeconds", "desc": "", "formatter": "formatDuration" },
      {
        "fn": "getRewardsCycleSeconds",
        "desc": "Seconds",
        "formatter": "formatDuration"
      },
      { "fn": "getInflationIntervalRate", "desc": "" },
      { "fn": "getInflationIntervalSeconds", "desc": "Seconds", "formatter": "formatDuration" },
      { "fn": "getMinipoolMinAVAXStakingAmt", "formatter": "formatEther" },
      { "fn": "getMinipoolNodeCommissionFeePct", "desc": "", "formatter": "formatEtherPct" },
      { "fn": "getMinipoolMinDuration", "desc": "Seconds", "formatter": "formatDuration" },
      { "fn": "getMinipoolMaxDuration", "desc": "Seconds", "formatter": "formatDuration" },
      { "fn": "getMinipoolCycleDuration", "desc": "Seconds", "formatter": "formatDuration" },
      { "fn": "getMinipoolCycleDelayTolerance", "desc": "Seconds" },
      { "fn": "getMinipoolMaxAVAXAssignment", "formatter": "formatEther" },
      { "fn": "getMinipoolMinAVAXAssignment", "formatter": "formatEther" },
      {
        "fn": "getMinipoolCancelMoratoriumSeconds",
        "desc": "Duration before cancel is allowed",
        "formatter": "formatDuration"
      },
      { "fn": "getExpectedAVAXRewardsRate", "desc": "", "formatter": "formatEtherPct" },
      { "fn": "getMaxCollateralizationRatio", "desc": "", "formatter": "formatEtherPct" },
      { "fn": "getMinCollateralizationRatio", "desc": "", "formatter": "formatEtherPct" },
      { "fn": "getTargetGGAVAXReserveRate", "desc": "", "formatter": "formatEtherPct" },
      {
        "fn": "getClaimingContractPct",
        "args": ["ClaimProtocolDAO"],
        "title": "getClaimingContractPct (DAO)",
        "formatter": "formatEtherPct"
      },
      {
        "fn": "getClaimingContractPct",
        "args": ["ClaimNodeOp"],
        "title": "getClaimingContractPct (NodeOp)",
        "formatter": "formatEtherPct"
      },
      {
        "fn": "getClaimingContractPct",
        "args": ["MultisigManager"],
        "title": "getClaimingContractPct (rialto)",
        "formatter": "formatEtherPct"
      }
    ]
  },
  {
    "contract": "TokenggAVAX",
    "metrics": [
      { "fn": "totalAssets", "desc": "", "formatter": "formatEther" },
      { "fn": "lastSync", "desc": null, "formatter": "unixToISO" },
      { "fn": "rewardsCycleEnd", "desc": null, "formatter": "unixToISO" },
      { "fn": "lastRewardsAmt", "desc": null, "formatter": "formatEther" },
      { "fn": "totalReleasedAssets", "desc": null, "formatter": "formatEther" },
      { "fn": "stakingTotalAssets", "desc": null, "formatter": "formatEther" },
      {
        "fn": "amountAvailableForStaking",
        "desc": null,
        "formatter": "formatEther"
      }
    ]
  },
  {
    "contract": "Staking",
    "metrics": [
      {
        "fn": "getTotalGGPStake",
        "title": "Total GGP Stake",
        "desc": "Total GGP in vault assigned to the Staking contract",
        "formatter": "formatEther"
      },
      {
        "fn": "getStakerCount",
        "title": "Staker Count",
        "desc": "",
        "formatter": "bigToNumber"
      }
    ]
  },
  {
    "contract": "Storage",
    "metrics": [
      {
        "fn": "getGuardian",
        "title": "Guardian",
        "desc": "Address of current Guardian"
      },
      {
        "fn": "newGuardian",
        "title": "New Guardian",
        "desc": "Address of new Guardian"
      }
    ]
  },
  {
    "contract": "Vault",
    "metrics": [
      {
        "fn": "balanceOf",
        "args": ["MinipoolManager"],
        "title": "MinipoolManager Balance (AVAX)",
        "formatter": "formatEther"
      },
      {
        "fn": "balanceOf",
        "args": ["MultisigManager"],
        "title": "MultisigManager Balance (AVAX)",
        "formatter": "formatEther"
      },
      {
        "fn": "balanceOf",
        "args": ["Staking"],
        "title": "Staking Balance (AVAX)",
        "formatter": "formatEther"
      },
      {
        "fn": "balanceOf",
        "args": ["ClaimNodeOp"],
        "title": "ClaimNodeOp Balance (AVAX)",
        "formatter": "formatEther"
      },
      {
        "fn": "balanceOf",
        "args": ["ClaimProtocolDAO"],
        "title": "ClaimProtocolDAO Balance (AVAX)",
        "formatter": "formatEther"
      },
      {
        "fn": "balanceOf",
        "args": ["ProtocolDAO"],
        "title": "ProtocolDAO Balance (AVAX)",
        "formatter": "formatEther"
      },
      {
        "fn": "balanceOfToken",
        "args": ["ProtocolDAO", "0x69260B9483F9871ca57f81A90D91E2F96c2Cd11d"],
        "title": "ProtocolDAO Balance (GGP)",
        "formatter": "formatEther"
      },
      {
        "fn": "balanceOfToken",
        "args": ["ClaimNodeOp", "0x69260B9483F9871ca57f81A90D91E2F96c2Cd11d"],
        "title": "ClaimNodeOp Balance (GGP)",
        "formatter": "formatEther"
      },
      {
        "fn": "balanceOfToken",
        "args": ["ClaimProtocolDAO", "0x69260B9483F9871ca57f81A90D91E2F96c2Cd11d"],
        "title": "ClaimProtocolDAO Balance (GGP)",
        "formatter": "formatEther"
      },
      {
        "fn": "balanceOfToken",
        "args": ["Staking", "0x69260B9483F9871ca57f81A90D91E2F96c2Cd11d"],
        "title": "Staking Balance (GGP)",
        "formatter": "formatEther"
      },
      {
        "fn": "balanceOfToken",
        "args": ["RewardsPool", "0x69260B9483F9871ca57f81A90D91E2F96c2Cd11d"],
        "title": "RewardsPool Balance (GGP)",
        "formatter": "formatEther"
      }
    ]
  }
]
